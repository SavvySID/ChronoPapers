import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { filecoinStorage } from '@/lib/filecoin'

// Ensure this API route runs on Node.js runtime and is not statically optimized
export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'
export const revalidate = 0
import { ApiResponse } from '@/types'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const paper = await prisma.researchPaper.findUnique({
      where: { id: params.id }
    })

    if (!paper) {
      return NextResponse.json<ApiResponse<null>>({
        success: false,
        error: 'Paper not found'
      }, { status: 404 })
    }

    // Check if this is a demo paper (has demo CID)
    const isDemoPaper = paper.CID.startsWith('QmDemo')
    
    if (isDemoPaper) {
      // For demo papers, create a simple text file with paper information
      const paperContent = `
CHRONOPAPERS - RESEARCH PAPER

Title: ${paper.title}
Author: ${paper.author}
DOI: ${paper.doi || 'N/A'}
CID: ${paper.CID}
Upload Date: ${new Date(paper.timestamp).toLocaleDateString()}
Verification Status: ${paper.isVerified ? 'Verified' : 'Unverified'}

ABSTRACT:
${paper.abstract}

KEYWORDS:
${paper.keywords ? JSON.parse(paper.keywords).join(', ') : 'N/A'}

---
This is a demo paper generated by ChronoPapers.
For demonstration purposes only.
      `.trim()
      
      const headers = new Headers()
      headers.set('Content-Type', 'text/plain')
      headers.set('Content-Disposition', `attachment; filename="${paper.title.replace(/[^a-z0-9]/gi, '_')}.txt"`)
      headers.set('Content-Length', paperContent.length.toString())

      return new NextResponse(paperContent, {
        status: 200,
        headers
      })
    }

    // For real papers, download from Filecoin using Synapse SDK
    const downloadResult = await filecoinStorage.downloadFile(paper.CID)
    
    const headers = new Headers()
    headers.set('Content-Type', paper.fileType || 'application/octet-stream')
    headers.set('Content-Disposition', `attachment; filename="${paper.title.replace(/[^a-z0-9]/gi, '_')}.${paper.fileType?.split('/')[1] || 'pdf'}"`)
    headers.set('Content-Length', downloadResult.size.toString())

    return new NextResponse(downloadResult.data, {
      status: 200,
      headers
    })

  } catch (error) {
    console.error('Download error:', error)
    return NextResponse.json<ApiResponse<null>>({
      success: false,
      error: 'Failed to download paper'
    }, { status: 500 })
  }
}

